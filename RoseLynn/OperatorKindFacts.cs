#nullable enable

using System;

namespace RoseLynn;

public static partial class OperatorKindFacts
{
    public static OperatorKind MapNameToKind(string operatorMethodName, out OperatorCheckingMode checkingMode)
    {
        var operatorName = ParseOperatorMethodName(operatorMethodName, out checkingMode);
        return MapNameToKind_Manual(operatorName);
    }

    public static bool IsUnary(OperatorKind kind)
    {
        return IsUnary_Manual(kind);
    }
    public static bool IsBinary(OperatorKind kind)
    {
        return !IsUnary(kind);
    }

    // The methods should be generated by a source generator, and suffixed with _Generated

    private static bool IsUnary_Manual(OperatorKind kind)
    {
        return kind
            is OperatorKind.Addition
            or OperatorKind.Subtraction
            or OperatorKind.Multiply
            or OperatorKind.Division
            or OperatorKind.Modulus
            // ...
            ;
    }

    private static OperatorKind MapNameToKind_Manual(string name) => name switch
    {
        nameof(OperatorKind.Addition) => OperatorKind.Addition,
        nameof(OperatorKind.Subtraction) => OperatorKind.Subtraction,
        nameof(OperatorKind.Multiply) => OperatorKind.Multiply,
        nameof(OperatorKind.Division) => OperatorKind.Division,

        // ...
    };

    private static string ParseOperatorMethodName(string name, out OperatorCheckingMode checkingMode)
    {
        const string opPrefix = "op_";
        const string checkedPrefix = "Checked";

        var opPrefixSpan = opPrefix.AsSpan();
        var checkedPrefixSpan = checkedPrefix.AsSpan();

        checkingMode = OperatorCheckingMode.Undefined;

        var operatorName = name.AsSpan();
        if (operatorName.StartsWith(opPrefixSpan, StringComparison.Ordinal))
        {
            operatorName = operatorName.Slice(opPrefix.Length);
            if (operatorName.StartsWith(checkedPrefixSpan, StringComparison.Ordinal))
            {
                operatorName = operatorName.Slice(checkedPrefix.Length);
                checkingMode = OperatorCheckingMode.Checked;
            }
        }

        return operatorName.ToString();
    }
}
